// core types: u8, i8, u16, i16, u32, i32, u64, i64, f32, f64
// pointer types: ptr(type), funcptr(returntype, (arg1type, arg2type, ...))
// composite types: structs, array(type, len)




/*
f32 return_literal()
{
    f32 x;
exit:
    return 16.1f32;
}
*/

struct Vec2
{
    f32 x;
    f32 y;
}

void add_to_x(ptr(Vec2) vec)
{
    (*vec).x = (*vec).x + 1.0f32;
    
    return;
}

void struct_literal()
{
    Vec2 val = Vec2 { 1.0f32, 0.5f32 };
    print_bytes(((&val) bit_as ptr(u8)), 8u64);
    
    val = Vec2 { 2.0001f32, 0.4999342f32 };
    print_bytes(((&val) bit_as ptr(u8)), 8u64);
    
    add_to_x(&val);
    print_bytes(((&val) bit_as ptr(u8)), 8u64);
    
    return;
}

f32 plus_one(f32 a)
{
    return a + 1.0f32;
}

funcptr(f32, (f32)) r_add_one()
{
    return plus_one;
}

f32 wahahah(funcptr(f32, (f32)) f, f32 a)
{
    return f(a);
}


f32 add(f32 a, f32 b)
{
    Vec2 vec;
    vec.x = a;
    vec.y = b;
    //a = vec.x + vec.y - 1.0f32;
    
    array(f32, 2) list;
    list[0i64] = a;
    *(&(list[1i64])) = b;
    
    u64 kge = 5931u64;
    i64 kge2 = (kge) as i64;
    
    //f32 asdf = r_add_one()(list[0i64] + list[1i64]);
    return wahahah(r_add_one(), (a + b)) - 1.0f32;
}


/*

f32 tenloop()
{
    f32 x;
    x = 0.0f32;
    
loop_head:
    x = x + 1.061f32;
    
    if(x < 10.0f32)
        goto loop_head;
    
    return x;
}
*/

f32 func_gravity()
{
    u64 i = 0u64;
    f64 yvel = 0.0f64;
    f64 y = 0.0f64;
    f64 gravity = 9.8f64;
    f64 delta = 0.001f64;
    
head:
    yvel = yvel + delta*gravity*0.5f64;
    y = y + yvel*delta;
    yvel = yvel + delta*gravity*0.5f64;
    
    i = i + 1u64;
    
    if (i < 500000000u64)
        goto head;
    
    return (y) as f32;
}

void returns_void(f32 a)
{
    a = a;
    return;
}

/*
// TODO
void void_ptr_arg(ptr(void) a)
{
    return;
}
*/

void array_literal()
{
    array(u8, 10) funtime = [16u8, 201u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8];
    print_bytes((&funtime) bit_as ptr(u8), 10u64);
    funtime = [61u8, 1u8, 0u8, 0u8, 0u8, 1u8, 2u8, 3u8, 0u8, 42u8];
    print_bytes((&funtime) bit_as ptr(u8), 10u64);
    return;
}
void print_garbage()
{
    array(u8, 16) garbage;
    
    garbage[ 0i64] = 16u8;
    garbage[ 1i64] = 1u8;
    garbage[ 2i64] = 175u8;
    garbage[ 3i64] = 15u8;
    garbage[ 4i64] = 115u8;
    garbage[ 5i64] = 255u8;
    garbage[ 6i64] = 94u8;
    garbage[ 7i64] = 114u8;
    garbage[ 8i64] = 62u8;
    garbage[ 9i64] = 0u8;
    garbage[10i64] = 183u8;
    garbage[11i64] = 123u8;
    garbage[12i64] = 86u8;
    garbage[13i64] = 63u8;
    garbage[14i64] = 85u8;
    garbage[15i64] = 1u8;
    
    print_bytes((&garbage) bit_as ptr(u8), 16u64);
    
    u8 a;
    i32 r;
    
    // memcmp not implemented
    //a = 16u8;
    //r = intrinsic_memcmp(&a, &garbage[0i64], 1u64);
    //print_bytes((&r bit_as ptr(u8)), 4u64);
    //
    //a = 17u8;
    //r = intrinsic_memcmp(&a, &garbage[0i64], 1u64);
    //print_bytes((&r bit_as ptr(u8)), 4u64);
    //
    //a = 15u8;
    //r = intrinsic_memcmp(&a, &garbage[0i64], 1u64);
    //print_bytes((&r bit_as ptr(u8)), 4u64);
    
    return;
}


struct Vector3 {
    f64 x;
    f64 y;
    f64 z;
}

Vector3 vec3_mul_f64(Vector3 a, f64 b)
{
    a.x = a.x * b;
    a.y = a.y * b;
    a.z = a.z * b;
    return a;
}
Vector3 vec3_mul_vec3(Vector3 a, Vector3 b)
{
    a.x = a.x * b.x;
    a.y = a.y * b.y;
    a.z = a.z * b.z;
    return a;
}
Vector3 vec3_add_vec3(Vector3 a, Vector3 b)
{
    a.x = a.x + b.x;
    a.y = a.y + b.y;
    a.z = a.z + b.z;
    return a;
}
Vector3 vec3_sub_vec3(Vector3 a, Vector3 b)
{
    a.x = a.x - b.x;
    a.y = a.y - b.y;
    a.z = a.z - b.z;
    return a;
}
f64 vec3_sq_length(Vector3 a)
{
    return a.x*a.x + a.y*a.y + a.z*a.z;
}
f64 vec3_length(Vector3 a)
{
    return intrinsic sqrt(vec3_sq_length(a));
}

struct linked_list {
    ptr(linked_list) next;
    u8 data;
}

void func_etc()
{
    linked_list asdf;
    asdf.next = &asdf;
    asdf.data = 172u8;
    
    u8 a = 10u8;
    u8 b = 192u8;
    print_float((b % a) as f64);
    
    i8 a2 = -10i8;
    i8 b2 = -112i8;
    print_float((b2 % a2) as f64);
    
    f32 a3 = -10.0f32;
    f32 b3 = 192.1f32;
    print_float((b3 % a3) as f64);
    
    f64 asdfj = (*@&(asdf.data)) as f64;
    *@&asdfj = 0.5263f64;
    print_float(asdfj);
    
    i64 zxcv = 0x85148113i64;
    u8 z = (zxcv) as u8;
    
    print_float((z) as f64);
    
    z = ~z;
    z = -z;
    z = +z;
    
    print_float((z) as f64);
    
    z = !z;
    
    print_float((z) as f64);
    
    print_float(3.14159f64);
    
    z = !!&z;
    
    print_float((z) as f64);
    
    z = !&z;
    
    print_float((z) as f64);
    
    print_float((add(5.952f32, 2.822f32)) as f64);
    
    intrinsic memset(&z, 1u8, 1u64);
    print_float((z) as f64);
    
    intrinsic memset(&z, 16u8, 1u64);
    print_float((z) as f64);
    
    print_float((16u8 / 3u8) as f64);
    print_float((16u8 / 2u8) as f64);
    print_float((16u8 / 1u8) as f64);
    print_float((16u8 / 0u8) as f64);
    
    return;
}

/*
struct invalid_type {
    invalid_type next;
}
*/

/*
struct doubly_invalid_type_a {
    doubly_invalid_type_b next;
}
struct doubly_invalid_type_b {
    doubly_invalid_type_a next;
}
*/

/*
struct triply_invalid_type_a {
    triply_invalid_type_b next;
}
struct triply_invalid_type_b {
    triply_invalid_type_c next;
}
struct triply_invalid_type_c {
    triply_invalid_type_a next;
}
*/


struct BigTestStruct
{
    f32 x;
    f32 y;
    array(f32, 100) z;
}


void buhuhuh(BigTestStruct vec)
{
    vec.x = vec.x + 5.0f32;
    return;
}


export_extern void main()
{
    BigTestStruct asdfiew;
    asdfiew.x = 1.01f32;
    print_float((asdfiew.x) as f64);
    buhuhuh(asdfiew);
    print_float((asdfiew.x) as f64);
    
    func_etc();
    // fp cast tests (must saturate)
    print_float((( 6140.6f64) as u64) as f64);
    print_float(((-6140.6f64) as u64) as f64);
    print_float(((-6140.6f64) as i64) as f64);
    print_float(((614964387123894585389674754327468474265740.6f64) as f32) as f64);
    
    u8 x;
    ptr(u8) xp = &x;
    u64 xp_int = (xp) bit_as u64;
    ptr(u8) xp_recover = (xp_int) bit_as ptr(u8);
    ptr(u8) xp_buh = xp_recover & 0xFFFFFFFFFFFFFFF0u64;
    xp_buh = xp_recover + 16u8;
    xp_buh = xp_recover + 16u32;
    xp_buh = xp_recover + 16u64;
    xp_buh = xp_recover - 16u8;
    xp_buh = xp_recover - 16u32;
    xp_buh = xp_recover - 16u64;
    print_float((xp_int) as f64);
    print_float(((xp_buh) bit_as u64) as f64);
    
    u64 agidkr = 0xDEADBEEFF00D1337u64;
    
    array(ptr(u8), 2) testargs = [
        (&agidkr) bit_as ptr(u8),
        (0u64) bit_as ptr(u8),
    ];
    array(ptr(u8), 2) testargs2 = [
        (&['!', '%', 'X', '\n', 0u8]) bit_as ptr(u8),
        (0u64) bit_as ptr(u8),
    ];
    
    u64 size_of_f64 = sizeof f64;
    
    array(ptr(u8), 2) testargs3 = [
        (&size_of_f64) bit_as ptr(u8),
        (0u64) bit_as ptr(u8),
    ];
    
    // test printing format strings
    
    print_fmt((&['!', '%', 'X', '\n', 0u8]) bit_as ptr(u8), (&testargs) bit_as ptr(ptr(u8)));
    print_fmt((&['%', 's', '\n', 0u8]) bit_as ptr(u8), (&testargs2) bit_as ptr(ptr(u8)));
    print_fmt((&['!', '%', 'X', '\n', 0u8]) bit_as ptr(u8), (&testargs3) bit_as ptr(ptr(u8)));
    
    // test bitcasting between array and struct
    array(f32, 2) buahs = [0.5f32, 10.156f32];
    u64 temp_test = 0x80u64;
    Vec2 temp_test2 = (buahs) bit_as Vec2;
    buahs[0i64] = 3.1415f32;
    print_float((temp_test2.x) as f64); // must print 0.5, NOT 3.141...
    print_float((temp_test2.y) as f64);
    
    // test bitcasting between array and primitive
    
    array(u16, 2) gwerksd = [0x1043u16, 0xF00Du16];
    u32 asdgwreids = (gwerksd) bit_as u32;
    u64 asdgwreids_printable = (asdgwreids) as u64;
    print_fmt("0x%X\n", (&[
        (&asdgwreids_printable) bit_as ptr(u8),
    ]) bit_as ptr(ptr(u8)));
    
    u32 testvar = 0x1043F00Du32;
    print_fmt("0x%X\n",
        (&[
            (&testvar) bit_as ptr(u8),
        ]) bit_as ptr(ptr(u8))
    );
    
    // test bitcasting between primitive and array
    
    array(u16, 2) gwerksd2 = (asdgwreids) bit_as array(u16, 2);
    print_float((asdgwreids & 0xFFFFu32) as f64);
    print_float((asdgwreids >> 16u32) as f64);
    print_float((gwerksd2[0i64]) as f64);
    print_float((gwerksd2[1i64]) as f64);
    
    u8 abvwgek = '5';
    u32 abvwgek_u32 = '5'u32;
    
    
    // early return test (must not crash)
    return;
    print_float(0.0f64);
    return;
}