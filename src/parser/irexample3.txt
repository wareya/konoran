// core types: u8, i8, u16, i16, u32, i32, u64, i64, f32, f64
// pointer types: ptr(type), funcptr(returntype, (arg1type, arg2type, ...))
// composite types: structs, array(type, len)


struct Vec2
{
    f32 x;
    f32 y;
}


Vec2 bruh = constexpr Vec2 { 529.19f32, 3.14f32 };

u64 beepboop = (constexpr (main) bit_as u64) + 8523u64;

ptr(u8) fgigei = constexpr "bk4ui34i";

export_extern void main()
{
    u8 asdf = constexpr (52u8 + 242u8);
    array(u8, 4) myvar = constexpr [' ', ' ', ' ', 8u8 + 15u8];
    print_float((myvar[3i64]) as f64);
    
    Vec2 buh = constexpr Vec2 { 9153.9f32 / 402.630f32, 8152.852f32 };
    print_float((buh.x) as f64);
    
    u8 asdf2 = constexpr (242u8 / 7u8);
    print_float((asdf2) as f64);
    asdf2 = constexpr (242u8 / 0u8);
    print_float((asdf2) as f64);
    
    print_float((bruh.x) as f64);
    print_float((beepboop) as f64);
    
    ptr(u8) wah = constexpr "fkg3ui";
    array(u8, 6) wah2 = constexpr "skgue"array;
    //array(u8, 6) wah2 = constexpr ['s', 'k', 'g', 'u', 'e', 0u8];
    
    array(ptr(u8), 1) buh2 = [
        (0u64) bit_as ptr(u8)
    ];
    
    print_str((&wah2) as ptr(u8));
    print_str("\n");
    print_str(fgigei);
    print_str("\n");
    print_str(wah);
    print_str("\n");
    print_fmt(wah, (&buh2) as ptr(ptr(u8)));
    return;
}
