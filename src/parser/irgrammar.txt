float: TOKEN
%[0-9]+\.[0-9]+([eE]([+-])?[0-9]+)?f(32|64)%
%[0-9]+\.([eE]([+-])?[0-9]+)?f(32|64)%
%\.[0-9]+([eE]([+-])?[0-9]+)?f(32|64)%

integer: TOKEN
%[\-]?[0-9]+(i|u)(8|16|32|64)%
%[\-]?0x[0-9A-Fa-f]+(i|u)(8|16|32|64)%

integer_token: TOKEN
%[0-9]+%
%0x[0-9A-Fa-f]+%

name: TOKEN
%[a-zA-Z_][0-9a-zA-Z_]*%

embedname: EMBED
%[a-zA-Z_][0-9a-zA-Z_]*%

rvarname:
$embedname$

ptr_type: HIDELITERALS
ptr ( $type$ )

funcptr_args:
>>? $type$...,

funcptr_type: HIDELITERALS
funcptr ( $type$ , ( $funcptr_args$ ) )

array_type: HIDELITERALS
array ( $type$ , $integer_token$ )

fundamental_type: TOKEN
void
u8
i8
u16
i16
u32
i32
u64
i64
f32
f64

struct_type:
$embedname$

type:
$ptr_type$
$funcptr_type$
$array_type$
$fundamental_type$
$struct_type$

capsname: TOKEN
%[A-Z][0-9a-zA-Z_]*%

parenexpr: HIDELITERALS
( $expr$ )

lvar_name:
$name$

lvar:
$rhunexpr$
$unary$
$lvar_name$

cast: HIDELITERALS
( $expr$ ) as $type$

bitcast: HIDELITERALS
( $expr$ ) bit_as $type$

unusedcomma:
,

array_literal: HIDELITERALS
[ $expr$..., $unusedcomma$? ]

struct_literal: HIDELITERALS
$struct_type$ { $expr$..., $unusedcomma$? }

supersimplexpr: SIMPLIFY
$cast$
$bitcast$
$array_literal$
$struct_literal$
$parenexpr$
$float$
$integer$
$rvarname$

simplexpr: SIMPLIFY
$intrinsic$
$cast$
$bitcast$
$array_literal$
$struct_literal$
$rhunexpr$
$parenexpr$
$float$
$integer$
$rvarname$

expr: SIMPLIFY
$binexpr_0$

binexpr_0: SIMPLIFY LEFTBINEXPR 0
$binexpr_1$ >>? $binop_0$ $binexpr_0$

binexpr_1: SIMPLIFY LEFTBINEXPR 1
$binexpr_2$ >>? $binop_1$ $binexpr_1$

binexpr_2: SIMPLIFY LEFTBINEXPR 2
$binexpr_3$ >>? $binop_2$ $binexpr_2$

binexpr_3: SIMPLIFY LEFTBINEXPR 3
$binexpr_4$ >>? $binop_3$ $binexpr_3$

binexpr_4: SIMPLIFY LEFTBINEXPR 4
$lhunop$ >>? $binop_4$ $binexpr_4$

unary:
$unop$ $lhunop$

lhunop: SIMPLIFY
$unary$
$simplexpr$


unop:
!
-
+
~
*
&
@

binop_0:
and
or
&&
||

binop_1:
|
&
^

binop_2:
==
!=
>=
<=
>
<

binop_3:
+
-

binop_4:
*
/
%

arglist: EMBED
$expr$...,

funcargs: HIDELITERALS
( $arglist$? )

arrayindex: HIDELITERALS
[ $expr$ ]

indirection: HIDELITERALS
. $embedname$

rhunexpr_right:
$funcargs$
$arrayindex$
$indirection$

rhunexpr:
$supersimplexpr$ $rhunexpr_right$+

statementlist: HIDELITERALS
{ $statement$* }

binstateop:
=

binstate: HIDELITERALS
$lvar$ $binstateop$ $expr$ ;

funcarg:
$type$ $name$

funcdefargs:
>>? $funcarg$...,

funcbody:
$statementlist$

intrinsic: HIDELITERALS
intrinsic $name$ $funcargs$

funcdef: HIDELITERALS
$type$ $name$ ( $funcdefargs$ ) $funcbody$

structparts:
$declaration$+

structdef: HIDELITERALS
struct $name$ { $structparts$ }

ifcondition: HIDELITERALS
if $parenexpr$ goto $name$ ;

goto: HIDELITERALS
goto $name$ ;

return: HIDELITERALS
return $expr$ ;
return ;

#intrinsic_memcpy: HIDELITERALS
#intrinsic_memcpy $expr$ $expr$ $expr$ ;

#intrinsic_memcpy_volatile: HIDELITERALS
#intrinsic_memcpy_volatile $expr$ $expr$ $expr$ ;

#intrinsic_memmove: HIDELITERALS
#intrinsic_memmove $expr$ $expr$ $expr$ ;

#intrinsic_memmove_volatile: HIDELITERALS
#intrinsic_memmove_volatile $expr$ $expr$ $expr$ ;

#intrinsic_memset: HIDELITERALS
#intrinsic_memset $expr$ $expr$ $expr$ ;

#intrinsic_memset_volatile: HIDELITERALS
#intrinsic_memset_volatile $expr$ $expr$ $expr$ ;

instruction:
$goto$
$return$
#$intrinsic_memcpy$
#$intrinsic_memcpy_volatile$
#$intrinsic_memmove$
#$intrinsic_memmove_volatile$
#$intrinsic_memset$
#$intrinsic_memset_volatile$

label: HIDELITERALS
$name$ :

declaration: HIDELITERALS
$type$ $name$ ;

fulldeclaration: HIDELITERALS
$type$ $name$ = $expr$ ;

vismodifier:
# best effort export for dlls etc
>>? export_extern
# do not expose to other modules At All
>>? private

globaldeclaration: HIDELITERALS
$vismodifier$ $type$ $name$ ;

globalfulldeclaration: HIDELITERALS
$vismodifier$ $type$ $name$ = $expr$ ;

importsource:
import_extern
using

importglobal: HIDELITERALS
$importsource$ $type$ $name$ ;

importfunc: HIDELITERALS
$importsource$ $type$ $name$ ( $funcdefargs$ ) ;

statement: HIDELITERALS
$instruction$
$statementlist$
$declaration$
$fulldeclaration$
$ifcondition$
$binstate$
$label$
$expr$ ;

rootstatement: SIMPLIFY
$importglobal$
$importfunc$
$globaldeclaration$
$globalfulldeclaration$
$structdef$
$funcdef$

program:
$rootstatement$*
