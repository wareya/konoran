

struct Vec2
{
    f32 x;
    f32 y;
}

struct Vec2d
{
    f64 x;
    f64 y;
}

struct Vec3d
{
    f64 x;
    f64 y;
    f64 z;
}

struct TestStruct
{
    u8 a;
    u8 _;
    u16 b;
    u8 _;
}

using void myfun2(Vec2);
using void myfun2d(Vec2d);
using void myfun3d(Vec3d);

Vec2 print_vec2(Vec2 vec)
{
    print_float((vec.x) as f64);
    print_float((vec.y) as f64);
    
    vec.x = vec.x + 2943.0529f32;
    
    return vec;
}

void main()
{
    TestStruct asdf = TestStruct {8u8, 15u16};
    print_float((asdf.a) as f64);
    print_float((asdf.b) as f64);
    asdf = TestStruct {10u8, 45u16};
    asdf = asdf;
    print_float((asdf.a) as f64);
    print_float((asdf.b) as f64);
    
    Vec2 kgeg = Vec2 { 124.016f32, 815.1538f32 };
    kgeg = print_vec2(kgeg);
    kgeg = print_vec2(kgeg);
    
    constexpr Vec2 kd113 = constexpr Vec2 { 2.2f32, 5.5f32 };
    //print_vec2(kd113);
    print_vec2(Vec2 { 2.2f32, 5.5f32 });
    
    print_float(((constexpr Vec2 { 3.141f32, 5.5f32 }).x) as f64);
    print_float(((constexpr [3.141f32])[0i64]) as f64);
    print_float(((constexpr [Vec2 { 3.141f32, 5.5f32 }])[0i64].x) as f64);
    
    ptr(u8) asdie = decay_to_ptr [42u8];
    
    print_float((*asdie) as f64);
    
    *asdie = 69u8;
    
    print_float((*asdie) as f64);
    
    //print_float(gkue); // invalid code
    
    {
        constexpr f64 gkue = 19843.81f64;
        f64 gkue2 = 5481.581f64;
    }
    
    print_float(gkue);
    //print_float(gkue2); // invalid code
    print_float(gkue3);
    
    //print_float(('𠂌') as f64); // invalid code
    print_float(('ÿ') as f64);
    print_float(('𠂌'u32) as f64);
    
    return;
}

constexpr f64 gkue3 = 91439.10f64;
