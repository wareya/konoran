
// conjured pointer example
// only works with implementations that use a local stack for variables and keep them in the same order they're declared
// this abuse of the stack is normally UB; however, aside from the stack abuse UB, the pointer operations are legal by konoran's spec
//
// example outputs:
// 9245
// 42
// 9245
// 9245

void main()
{
    i32 dummy  = 42i32;
    i32 dummy2 = 42i32;

/*    
    ptr(u32) fake_conjured_ptr = (&dummy2) bit_as ptr(u32);
    fake_conjured_ptr = fake_conjured_ptr + 4u64;
    *fake_conjured_ptr = 9245u32;
*/
    // The above does not create a "conjured" pointer to `dummy`.
    // "Conjured" pointers cannot exclusively have provenance based on the address of a known value.
    // Taking the address of dummy2 makes it so fake_conjured_ptr exclusively has provenance information associated with dummy2,
    //  despite pointing outside of dummy2's address range, so the optimizer is allowed to treat the access to fake_conjured_ptr
    //  as completely undefined and produce an impossible poison value.
    
    // Instead, we have to do something like below:
    ptr(i32) conjured_ptr = ((&dummy2) bit_as u64) bit_as ptr(i32);
    conjured_ptr = conjured_ptr + 4u64;
    *conjured_ptr = 9245i32;
    // Casting to int and back destroys provenance information, so this works and creates a genuinely "conjured" pointer.
    
    f64 out_b = (*conjured_ptr) as f64;
    f64 out_a = (dummy) as f64; // this can be reordered to earlier in the function; in fact, its value can be assumed to be 42
    
    *@&dummy = *@&dummy2; // ensure dummy2 and dummy exist on the stack until after conjured_ptr is written to and read from
    
    print_float(out_b); // must print "9245"
    print_float(out_a); // allowed to print "42", may also print "9245"
    
    main2();
    
    return;
}

void main2()
{
    i32 dummy  = 42i32;
    
    // Integers correctly derived from a variable must retain their provenance even if converted to int and back.
    
    ptr(i32) conjured_ptr = ((&dummy) bit_as u64) bit_as ptr(i32);
    conjured_ptr = conjured_ptr + 400u64;
    conjured_ptr = conjured_ptr - 400u64;
    conjured_ptr = conjured_ptr - 400u64;
    conjured_ptr = conjured_ptr + 400u64;
    *conjured_ptr = 9245i32;
    
    f64 out_b = (*conjured_ptr) as f64;
    f64 out_a = (dummy) as f64;
    
    *@&dummy = *@&dummy;
    
    print_float(out_b); // must print "9245"
    print_float(out_a); // must print "9245"; MUST NOT print "42"
    
    return;
}