name: Rust

on:
  push:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always
  
jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest
    env:
      nix_prefix: nix shell -i -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/33d1e753c82ffc557b4a585c77de43d4c922ebb5.tar.gz nixpkgs#coreutils nixpkgs#gcc nixpkgs#musl.dev nixpkgs#pkgsStatic.zlib nixpkgs#pkgsStatic.ncurses nixpkgs#pkgsStatic.libxml2 nixpkgs#rustup nixpkgs#llvmPackages_18.libllvm.dev nixpkgs\#llvmPackages_18.clang -c
    steps:
    - uses: actions/checkout@v4
      
    - name: print architecture
      run: uname -p
    - name: save arch
      run: echo "RUNNERCPUARCH=$(uname -p -p)" >> $GITHUB_ENV
    - name: test arch
      run: echo "${{ env.RUNNERCPUARCH }}"
      
    #- name: download zlib source code
    #  uses: robinraju/release-downloader@v1.10
    #  with:
    #    repository: madler/zlib
    #    tag: v1.3.1
    #    fileName: zlib-1.3.1.tar.gz 
    #    out-file-path: .
    #    extract: true
      
    #- name: inspect zlib
    #  run: cd zlib-1.3.1 && ls . && echo "----"
      
    - name: Use the determinate nix installer
      uses: DeterminateSystems/nix-installer-action@main
      with:
        source-revision: 7011c077ec491da410fbc39f68676b0908b9ce7e
      
    - name: load nix environment
      run: ${{env.nix_prefix}} ls
      
    - name: test musl
      run: ${{env.nix_prefix}} echo "$(nix build nixpkgs#musl.out --print-out-paths --no-link)" && echo "----" && ls "$(nix build nixpkgs#musl.out --print-out-paths --no-link)/lib" && echo "----"
      
    - name: test zlib
      run: ${{env.nix_prefix}} echo "$(nix build nixpkgs#pkgsStatic.zlib.out --print-out-paths --no-link)" && echo "----" && ls "$(nix build nixpkgs#pkgsStatic.zlib.out --print-out-paths --no-link)/lib" && echo "----"
      
    - name: test ncurses
      run: ${{env.nix_prefix}} echo "$(nix build nixpkgs#pkgsStatic.ncurses.out --print-out-paths --no-link)" && echo "----" && ls "$(nix build nixpkgs#pkgsStatic.ncurses.out --print-out-paths --no-link)/lib" && echo "----"
      
    - name: test libxml2
      run: ${{env.nix_prefix}} echo "$(nix build nixpkgs#pkgsStatic.libxml2.out --print-out-paths --no-link)" && echo "----" && ls "$(nix build nixpkgs#pkgsStatic.libxml2.out --print-out-paths --no-link)/lib" && echo "----"
      
    - name: save lib dirs (musl)
      run: echo "MUSLIBS=$(nix build nixpkgs#musl.out --print-out-paths --no-link)/lib" >> $GITHUB_ENV
      
    - name: save lib dirs (zlib)
      run: echo "ZLIBS=$(nix build nixpkgs#pkgsStatic.zlib.out --print-out-paths --no-link)/lib" >> $GITHUB_ENV
      
    - name: save lib dirs (curses)
      run: echo "NLIBS=$(nix build nixpkgs#pkgsStatic.ncurses.out --print-out-paths --no-link)/lib" >> $GITHUB_ENV
      
    - name: save lib dirs (libxml2)
      run: echo "XLIBS=$(nix build nixpkgs#pkgsStatic.libxml2.out --print-out-paths --no-link)/lib" >> $GITHUB_ENV
      
    - name: Install musl toolchain
      run: ${{env.nix_prefix}} rustup target add x86_64-unknown-linux-musl
      
    - name: Become horror
      run: mkdir target
           mkdir target/release &&
           mkdir target/release/deps &&
           echo "$(nix build nixpkgs#musl.out --print-out-paths --no-link)" &&
           echo "----" &&
           ls "$(nix build nixpkgs#musl.out --print-out-paths --no-link)" &&
           echo "----" &&
           ls "$(nix build nixpkgs#musl.out --print-out-paths --no-link)/lib" &&
           cp "$(nix build nixpkgs#musl.out --print-out-paths --no-link)/lib/librt.a" target/release/deps &&
           echo "----" &&
           ls target/release/deps
      
    - name: Build
      run: ${{env.nix_prefix}} cargo --config "build.rustflags=['-C', 'target-feature=+crt-static', '-C', 'default-linker-libraries=on', '-L', '${{env.MUSLIBS}}', '-L', '${{env.ZLIBS}}', '-L', '${{env.NLIBS}}', '-L', '${{env.XLIBS}}']" build --target x86_64-unknown-linux-musl --release --verbose
      
    - name: Inspect
      run: ls target/x86_64-unknown-linux-gnu/release
      
    - name: Nightly Release (Linux)
      uses: andelf/nightly-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "nightly-linux-${{ env.RUNNERCPUARCH }}"
        name: "Linux Nightly ${{ env.RUNNERCPUARCH }}"
        files: "target/x86_64-unknown-linux-gnu/release/konoran*"
    
